AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infraestructura para Chatbot DNOC con Bedrock'

Parameters:
  AgentId:
    Type: String
    Description: ID del agente de Bedrock
  AgentAliasId:
    Type: String
    Description: ID del alias del agente de Bedrock

Resources:
  # Rol IAM para Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DNOCChatbotLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAgentAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource: '*'

  # Función Lambda
  ChatbotLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: dnoc-chatbot-handler
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Placeholder - Deploy actual code')
              }
      Environment:
        Variables:
          AGENT_ID: !Ref AgentId
          AGENT_ALIAS_ID: !Ref AgentAliasId
      Timeout: 30

  # API Gateway
  ChatbotAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: dnoc-chatbot-api
      Description: API para el chatbot DNOC
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Recurso de API Gateway
  ChatResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatbotAPI
      ParentId: !GetAtt ChatbotAPI.RootResourceId
      PathPart: chat

  # Método POST
  ChatMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatbotAPI
      ResourceId: !Ref ChatResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatbotLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200

  # Método OPTIONS para CORS
  ChatOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatbotAPI
      ResourceId: !Ref ChatResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200

  # Despliegue de API
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ChatMethod
      - ChatOptionsMethod
    Properties:
      RestApiId: !Ref ChatbotAPI
      StageName: prod

  # Permiso para que API Gateway invoque Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatbotLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ChatbotAPI}/*/POST/chat'

Outputs:
  APIEndpoint:
    Description: 'Endpoint de la API'
    Value: !Sub 'https://${ChatbotAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/chat'
    Export:
      Name: DNOCChatbotAPIEndpoint

  LambdaFunctionName:
    Description: 'Nombre de la función Lambda'
    Value: !Ref ChatbotLambda
    Export:
      Name: DNOCChatbotLambdaFunction